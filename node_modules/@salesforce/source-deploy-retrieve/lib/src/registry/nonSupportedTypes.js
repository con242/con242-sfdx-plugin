"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasUnsupportedFeatures = exports.metadataTypes = exports.settings = exports.features = void 0;
/**
 * when checking for completeness or building registries
 * this is the list of features that are not available,
 * typically because the devhub doesn't support them, so we can't use metadataDescribe
 *
 * */
exports.features = [
    // ERROR running force:org:create: * is not a valid Features value.
    // 'SUSTAINABILITYAPP',
    'SERVICECATALOG',
    'EXPLAINABILITY',
    'DYNAMICATTRIBUTES',
    'CONTRACTMGMT',
    'CUSTOMIZABLENAMEDCREDENTIALS',
    'INDUSTRIESMFGPROGRAMPILOT',
    'HEALTHCLOUDHPIBETA',
    'MANAGETIMELINE',
    'HEALTHCLOUDBETA',
];
exports.settings = [
    'botSettings', // have not successfully deployed this because of licensing errors when deploying settings
];
exports.metadataTypes = [
    // things that don't show up in describe so far
    'PicklistValue',
    'AppointmentAssignmentPolicy',
    'WorkflowFlowAction',
    'AdvAcctForecastDimSource',
    'CareLimitType',
    'RelatedRecordAssocCriteria',
    'OmniInteractionAccessConfig',
    // two children of GlobalValueSet
    'CustomValue',
    'StandardValue',
];
const hasUnsupportedFeatures = (type) => {
    var _a, _b, _c;
    if (!((_a = type.orgShapes) === null || _a === void 0 ? void 0 : _a.developer)) {
        return true;
    }
    if (((_b = type.orgShapes.developer.features) === null || _b === void 0 ? void 0 : _b.length) &&
        exports.features.some((feature) => { var _a; return (_a = type.orgShapes) === null || _a === void 0 ? void 0 : _a.developer.features.includes(feature); })) {
        return true;
    }
    return ((_c = type.orgShapes) === null || _c === void 0 ? void 0 : _c.developer.settings) && exports.settings.some((setting) => { var _a; return (_a = type.orgShapes) === null || _a === void 0 ? void 0 : _a.developer.settings[setting]; });
};
exports.hasUnsupportedFeatures = hasUnsupportedFeatures;
//# sourceMappingURL=nonSupportedTypes.js.map