import { ContainerAsyncRequest, RecordId, SourceDeployResult, ToolingCreateResult } from '../types';
import { SourceComponent } from '../../resolve';
import { BaseDeploy } from './baseDeploy';
export declare class ContainerDeploy extends BaseDeploy {
    private static readonly CONTAINER_ASYNC_REQUEST;
    private static readonly METADATA_CONTAINER;
    deploy(component: SourceComponent, namespace: string): Promise<SourceDeployResult>;
    createMetadataContainer(): Promise<ToolingCreateResult>;
    createContainerMember(outboundFiles: string[], container: ToolingCreateResult): Promise<ToolingCreateResult>;
    getContentEntity(metadataType: string, fileName: string, namespace: string): Promise<string | undefined>;
    createContainerAsyncRequest(container: ToolingCreateResult): Promise<ToolingCreateResult>;
    pollContainerStatus(containerId: RecordId): Promise<ContainerAsyncRequest>;
    private buildSourceDeployResult;
}
