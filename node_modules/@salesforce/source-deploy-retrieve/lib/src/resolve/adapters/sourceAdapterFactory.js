"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceAdapterFactory = void 0;
const errors_1 = require("../../errors");
const forceIgnore_1 = require("../forceIgnore");
const bundleSourceAdapter_1 = require("./bundleSourceAdapter");
const decomposedSourceAdapter_1 = require("./decomposedSourceAdapter");
const matchingContentSourceAdapter_1 = require("./matchingContentSourceAdapter");
const mixedContentSourceAdapter_1 = require("./mixedContentSourceAdapter");
const defaultSourceAdapter_1 = require("./defaultSourceAdapter");
var AdapterId;
(function (AdapterId) {
    AdapterId["Bundle"] = "bundle";
    AdapterId["Decomposed"] = "decomposed";
    AdapterId["Default"] = "default";
    AdapterId["MatchingContentFile"] = "matchingContentFile";
    AdapterId["MixedContent"] = "mixedContent";
})(AdapterId || (AdapterId = {}));
class SourceAdapterFactory {
    constructor(registry, tree) {
        this.registry = registry;
        this.tree = tree;
    }
    getAdapter(type, forceIgnore = new forceIgnore_1.ForceIgnore()) {
        var _a;
        const adapterId = (_a = type.strategies) === null || _a === void 0 ? void 0 : _a.adapter;
        switch (adapterId) {
            case AdapterId.Bundle:
                return new bundleSourceAdapter_1.BundleSourceAdapter(type, this.registry, forceIgnore, this.tree);
            case AdapterId.Decomposed:
                return new decomposedSourceAdapter_1.DecomposedSourceAdapter(type, this.registry, forceIgnore, this.tree);
            case AdapterId.MatchingContentFile:
                return new matchingContentSourceAdapter_1.MatchingContentSourceAdapter(type, this.registry, forceIgnore, this.tree);
            case AdapterId.MixedContent:
                return new mixedContentSourceAdapter_1.MixedContentSourceAdapter(type, this.registry, forceIgnore, this.tree);
            case AdapterId.Default:
                return new defaultSourceAdapter_1.DefaultSourceAdapter(type, this.registry, forceIgnore, this.tree);
            case undefined:
                return new defaultSourceAdapter_1.DefaultSourceAdapter(type, this.registry, forceIgnore, this.tree);
            default:
                throw new errors_1.RegistryError('error_missing_adapter', [adapterId, type.name]);
        }
    }
}
exports.SourceAdapterFactory = SourceAdapterFactory;
//# sourceMappingURL=sourceAdapterFactory.js.map